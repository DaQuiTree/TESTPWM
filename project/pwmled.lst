C51 COMPILER V8.08   PWMLED                                                                06/01/2017 16:28:04 PAGE 1   


C51 COMPILER V8.08, COMPILATION OF MODULE PWMLED
OBJECT MODULE PLACED IN ..\output\pwmled.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\source\pwmled.c BROWSE DEBUG OBJECTEXTEND PRINT(.\pwmled.lst) OBJECT(..\
                    -output\pwmled.obj)

line level    source

   1          #define _PWMLED_C
   2          
   3          #include "config.h"
   4          
   5          sbit PWMOUT = P3^3;
   6          
   7          uint8 HighRH = 0;  //高电平重载值的高字节
   8          uint8 HighRL = 0;  //高电平重载值的低字节
   9          uint8 LowRH  = 0;  //低电平重载值的高字节
  10          uint8 LowRL  = 0;  //低电平重载值的低字节
  11          
  12          uint32 PeriodCnt = 0;
  13          
  14          void ConfigTimerTwo() //定时器二 50ms
  15          {
  16   1      
  17   1              RCAP2H = (uint8)((65535 - SYS_CLK/20 + 12) >> 8); //设置定时器二为显示器件定时器
  18   1              RCAP2L = (uint8)(65535 - SYS_CLK/20 + 12);
  19   1      
  20   1              T2CON = 0x00;
  21   1      
  22   1              TH2 = RCAP2H;
  23   1              TL2 = RCAP2L;
  24   1      
  25   1              TR2 = 1;
  26   1              //PT2 = 1;//设置LED显示处于最高中断优先级
  27   1              ET2 = 1;
  28   1      }
  29          
  30          void ConfigPWM(uint16 fr, uint8 dc)
  31          {
  32   1          uint16 high, low;
  33   1          
  34   1          PeriodCnt = (11059200/12) / fr; //计算一个周期所需的计数值
  35   1          high = (PeriodCnt*dc) / 100;    //计算高电平所需的计数值
  36   1          low  = PeriodCnt - high;        //计算低电平所需的计数值
  37   1          high = 65536 - high + 12;       //计算高电平的定时器重载值并补偿中断延时
  38   1          low  = 65536 - low  + 12;       //计算低电平的定时器重载值并补偿中断延时
  39   1          HighRH = (uint8)(high>>8); //高电平重载值拆分为高低字节
  40   1          HighRL = (uint8)high;
  41   1          LowRH  = (uint8)(low>>8);  //低电平重载值拆分为高低字节
  42   1          LowRL  = (uint8)low;
  43   1          TMOD &= 0x0F;   //清零T1的控制位
  44   1          TMOD |= 0x10;   //配置T1为模式1
  45   1          TH1 = HighRH;   //加载T1重载值
  46   1          TL1 = HighRL;
  47   1          ET1 = 1;        //使能T1中断
  48   1          TR1 = 1;        //启动T1
  49   1          PWMOUT = 1;     //输出高电平
  50   1      }
  51          void AdjustDutyCycle(uint8 dc)
  52          {
  53   1              uint16 high, low;
  54   1      
C51 COMPILER V8.08   PWMLED                                                                06/01/2017 16:28:04 PAGE 2   

  55   1              high = (PeriodCnt*dc)/100;
  56   1              low = PeriodCnt - high;
  57   1              high = 65536 - high + 12;
  58   1              low = 65536 - low + 12;
  59   1              HighRH = (uint8)(high >> 8);
  60   1              HighRL = (uint8)high;
  61   1              LowRH = (uint8)(low >> 8);
  62   1              LowRL = (uint8)low;
  63   1      }
  64          void InterruptTimerOne() interrupt 3
  65          {
  66   1          if (PWMOUT == 1)  //当前输出为高电平时，装载低电平值并输出低电平
  67   1          {
  68   2              TH1 = LowRH;
  69   2              TL1 = LowRL;
  70   2              PWMOUT = 0;
  71   2          }
  72   1          else              //当前输出为低电平时，装载高电平值并输出高电平
  73   1          {
  74   2              TH1 = HighRH;
  75   2              TL1 = HighRL;
  76   2              PWMOUT = 1;
  77   2          }
  78   1      }
  79          
  80          void InterruptTimerTwo() interrupt 5
  81          {
  82   1              uint8 code table[13] = {
  83   1              5, 18, 30, 41, 51, 60, 68, 75, 81, 86, 90, 93, 95
  84   1              };
  85   1              static bit dir = 0;
  86   1              static uint8 index = 0;
  87   1      
  88   1              TH2 = RCAP2H;
  89   1              TL2 = RCAP2L;
  90   1      
  91   1              AdjustDutyCycle(table[index]);
  92   1              if(dir == 0)
  93   1              {
  94   2                      index++;
  95   2                      if(index >= 12)
  96   2                      {
  97   3                              dir = 1;
  98   3                      }
  99   2              }
 100   1              else
 101   1              {
 102   2                      index--;
 103   2                      if(index == 0)
 104   2                      {
 105   3                              dir = 0;
 106   3                      }
 107   2              }
 108   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    306    ----
   CONSTANT SIZE    =     13    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      9       1
C51 COMPILER V8.08   PWMLED                                                                06/01/2017 16:28:04 PAGE 3   

   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
